.row
  .large-12.columns
    = form_for @contract, as: :contract, url: admin_contract_path(@contract), method: :put do |f|
      - if @contract.errors.any?
        .callout.alert
          ul
            - @contract.errors.full_messages.each do |msg|
              li= msg

      .row
        .medium-3.columns
          b= f.label :title, "Nazwa rozliczenia"
          = f.text_field :title

        .medium-3.columns
          b= f.label :document_date, "Data dokumentu *"
          = f.date_field :document_date

        .medium-3.columns
          b= f.label :document_type, 'Rodzaj dokumentu *'
          = f.select :document_type, Settlement::ContractRecord.document_types.map { |w, _| [I18n.t(w), w] }, selected: @contract.document_type

        .medium-3.columns
          b= f.label :cost, "Kwota rozliczenia"
          .input-group
            = f.number_field :cost, step: 0.01, class: 'input-group-field'
            span.input-group-label
                | zł

      - if can? :recon_up, @contract
        .row
          .medium-3.columns
            b= f.label :substantive_type, 'Grupa wydarzeń'
            = f.select :substantive_type,
            Settlement::ContractRecord.substantive_types.map { |w, _| [I18n.t(w, scope: :substantive_type), w] }, selected: @contract.substantive_type, include_blank: true

          .medium-3.columns
            = f.label :contractor_name, 'Kontrahent'
              = link_to 'Dodaj nowego kontrahenta', new_admin_contractor_path
            - names = Settlement::ContractorRecord.select(:id, :name).map { |u| { id: u.id, name: u.name } }
            - if @contract.contractor
              - pre = [{id: @contract.contractor_id, name: @contract.contractor.name}]
            - else
              - pre = []
            = f.text_field :contractor_name, 'data-tokeninput': { collection: names, options: { prePopulate: pre, tokenLimit: 1} }.to_json

      - if can? :manage, @contract
        .row
          .medium-3.columns
            b= f.label :state, "Status"
            = f.select :state,
            Settlement::ContractRecord.workflow_spec.states.map { |w, _| [I18n.t(w), w] }, selected: @contract.state

          .medium-3.columns
            b= f.label :group_type, 'Sekcja'
            = f.select :group_type, Settlement::ContractRecord.group_types.map { |w, _| [I18n.t(w), w] }, selected: @contract.group_type, include_blank: true

          .medium-3.columns
            b= f.label :financial_type, 'Rodzaj działalności'
            = f.select :financial_type, Settlement::ContractRecord.financial_types.map { |w, _| [I18n.t(w, scope: :financial_type), w] }, selected: @contract.financial_type, include_blank: true

          .medium-3.columns
            b= f.label :period_date, 'Okres rozliczeniowy'
            = f.date_select :period_date,  { :discard_day => true, include_blank: true}


      .row
        .medium-12.columns
          = f.label :description, "Uwagi do rozliczenia"
          = f.hidden_field :description, id: 'description_body'
          trix-editor input='description_body' style='min-height: 200px'

      .row
        .medium-6.columns
          = f.label :users_names, 'Osoby zainteresowane, które otrzymają e-mail z notyfikacją o dodaniu rozliczenia'
          - names = Db::User.select(:id, :first_name, :last_name).map{|u| { id: u.id, name: u.display_name } }
          - users = @contract.users.map{|u| { id: u.id, name: u.display_name } }
          = f.text_field :users_names, 'data-tokeninput': { collection: names, options: { prePopulate: users.uniq } }.to_json

        .medium-6.columns
          = f.label :events_names, 'Powiązane wydarzenia'
          - names = Training::Supplementary::CourseRecord.select(:id, :name).map{|u| { id: u.id, name: u.name } }
          - events = @contract.events.map{|u| { id: u.id, name: u.name } }
          = f.text_field :events_names, 'data-tokeninput': { collection: names, options: { prePopulate: events.uniq } }.to_json

      b= f.label :attachments, "Pliki"
      = f.file_field :attachments, multiple: true

      - if @contract.attachments.any?
        ul.no-bullet
          - @contract.attachments.select{|file| !MimeMagic.by_path(file.path).image? }.each do |attachment|
            li
              = link_to attachment.url, download: File.basename(attachment.file.path) do
                = image_tag('file.jpg', class: 'thumbnail', size: '50x50')
                |  
                = File.basename(attachment.file.path)
          - @contract.attachments.select{|file| MimeMagic.by_path(file.path).image? }.each_with_index do |photo, i|
            - unless photo.blank? || photo.thumb.blank?
              li
                = image_tag photo.thumb.url, class: 'thumbnail', data: { toggle: "photo-#{i}" }, size: '50x50'

                div id="photo-#{i}" class="reveal" data-reveal="" 
                  = image_tag photo.url
                  button.close-button aria-label=("Close reveal") data-close="" type="button" 
                    span aria-hidden="true"  &times;

      - if can? :update, @contract
        = f.submit "Zaktualizuj rozliczenie", class: 'button'
      = link_to 'wróć do rozliczenia', admin_contract_path(@contract.id), class: 'button primary'
      = link_to 'wróć do rozliczeń', admin_contracts_path, class: 'button secondary'
