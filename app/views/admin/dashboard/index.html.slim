.row
  .large-4.columns
    h3 5 ostatnich wizyt
    table.stack
      - Db::User.order('last_sign_in_at DESC NULLS LAST').limit(5).each do |user|
        tr
          td
            = "#{user.first_name} #{user.last_name}"
          td
            = user.last_sign_in_at

  .large-4.columns
    = link_to admin_reservations_path do
      h3 5 ostatnich rezerwacji
    table.stack
      - Db::Reservation.includes(:items, :user).not_archived.last(5).each do |reservation|
        tr
          td
            = "#{reservation.user.try(:first_name)} #{reservation.user.try(:last_name)}"
          td
            = link_to reservation.items.map(&:display_name).to_sentence, edit_admin_reservation_path(reservation.id)
  .large-4.columns
    = link_to admin_membership_fees_path do
      h3 5 ostatnich skladek
    table.stack
      - Db::Membership::Fee.includes(:user).order(created_at: :desc).includes(:payment).where(payments: { state: 'prepaid'}).limit(5).each do |payment|
        tr
          td
            = payment.year
          td
            - if payment.user
              = "#{payment.user.try(:first_name)} #{payment.user.try(:last_name)}"
            - else
              = Db::Profile.find_by(kw_id: payment.kw_id)&.display_name

.row
  .large-8.columns
    = link_to activities_mountain_routes_path do
      h3 5 ostatnich przejść
    table.stack
      - Db::Activities::MountainRoute.includes(:colleagues).order(created_at: :desc).limit(5).each do |route|
        tr
          td width='14%'
            = link_to route.climbing_date, activities_mountain_route_path(route.id)
          td
            = route.colleagues.map(&:display_name).compact.push(route.partners).compact.reject(&:empty?).to_sentence
          td
            = route.name

  .large-4.columns
    = link_to admin_profiles_path do
      h3 5 ostatnich zgłoszeń
    table.stack
      - Db::Profile.where(accepted: false).order('created_at DESC NULLS LAST').limit(5).each do |profile|
        tr
          td = link_to profile.display_name, admin_profile_path(profile.id)
          td = profile.email
.row
  .large-4.columns
    h3 dzisiejsi zaakceptowani
    table.stack
      - Db::Profile.where(accepted: true, application_date: Date.today.beginning_of_day..Date.today.end_of_day).order('created_at DESC NULLS LAST').each do |profile|
        tr
          td = link_to profile.display_name, admin_profile_path(profile.id)
          td = Db::User.find(profile.acceptor_id).display_name

  .large-4.columns
    h3 dzisiejsze dodane składki
    table.stack
      - Db::Membership::Fee.order(created_at: :desc).includes(:payment).where(created_at: Date.today.beginning_of_day..Date.today.end_of_day, payments: { cash: true, state: 'prepaid'}).each do |payment|
        tr
          td width='20%'
            = payment.year
          td
            - if Db::User.exists?(id: payment.creator_id)
              = Db::User.find(payment.creator_id).display_name
          td
            - if payment.user
              = "#{payment.user.try(:first_name)} #{payment.user.try(:last_name)}"
            - else
              = Db::Profile.find_by(kw_id: payment.kw_id)&.display_name

  .large-4.columns
    h3 wykazy do akceptacji
    table.stack
      - UserManagement::ProfileListRecord.where(accepted: false).order('created_at DESC NULLS LAST').each do |list|
        - if list.profile
          tr
            td = link_to list.profile.display_name, admin_profile_path(list.profile.id)
.row
  .large-4.columns
    h3 niedoręczone e-maile
    table.stack
      - EmailCenter::EmailRecord.includes(:mailable).where(state: 'sent').order('created_at DESC NULLS LAST').each do |email|
        tr
          td
            - if email.mailable_type == 'Db::Profile'
              = link_to email.mailable.try(:display_name), admin_profile_path(email.mailable_id)
            - elsif email.mailable_type == 'Training::Supplementary::SignUpRecord'
              = link_to email.mailable.try(:name), edit_supplementary_sign_up_path(email.mailable_id)
          td.text-right
            = link_to admin_email_record_path(email.id), style: 'padding: 5px', method: :delete, data: { confirm: 'Jestes pewien?' } do
              i.fi.fi-trash
