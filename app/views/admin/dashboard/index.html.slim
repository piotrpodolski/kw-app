.row
  .large-12.columns
    = link_to 'Importowanie', admin_importing_index_path, class: 'button large'
    = link_to 'Przejścia', activities_mountain_routes_path, class: 'button success large'
    = link_to 'Problemy', 'https://app.honeybadger.io/projects/54689/faults?q=-is%3Aresolved+-is%3Aignored', class: 'button large alert'
  .large-4.columns
.row
  .large-4.columns
    h3 5 ostatnich wizyt
    table.stack
      - Db::User.order('last_sign_in_at DESC NULLS LAST').limit(5).each do |user|
        tr
          td
            = "#{user.first_name} #{user.last_name}"
          td
            = user.last_sign_in_at

  .large-4.columns
    h3 5 ostatnich rezerwacji
    table.stack
      - Db::Reservation.all.sort_by(&:created_at).reverse!.take(5).each do |reservation|
        tr
          td
            = "#{reservation.user.try(:first_name)} #{reservation.user.try(:last_name)}"
          td
            = link_to reservation.items.map(&:display_name).to_sentence, edit_admin_reservation_path(reservation.id)
  .large-4.columns
    h3 5 ostatnich skladek
    table.stack
      - Db::Membership::Fee.order(created_at: :desc).includes(:payment).where(payments: { state: 'prepaid'}).limit(5).each do |payment|
        tr
          td
            = payment.year
          td
            = "#{payment.user.try(:first_name)} #{payment.user.try(:last_name)}"

.row
  .large-8.columns
    h3 5 ostatnich przejść
    table.stack
      - Db::Activities::MountainRoute.order(created_at: :desc).limit(5).each do |route|
        tr
          td width='14%'
            = link_to route.climbing_date, activities_mountain_route_path(route.id)
          td
            = route.colleagues.map(&:display_name).compact.push(route.partners).reject(&:empty?).to_sentence
          td
            = route.name

  .large-4.columns
    h3 5 ostatnich zgłoszeń
    table.stack
      - Db::Profile.where(accepted: false).order('created_at DESC NULLS LAST').limit(5).each do |profile|
        tr
          td = link_to profile.display_name, admin_profile_path(profile.id)
          td = profile.email
.row
  .large-4.columns
    h3 dzisiejsi zaakceptowani
    table.stack
      - Db::Profile.where(accepted: true, application_date: Date.today.beginning_of_day..Date.today.end_of_day).order('created_at DESC NULLS LAST').each do |profile|
        tr
          td = link_to profile.display_name, admin_profile_path(profile.id)
          td = Db::User.find(profile.acceptor_id).display_name

  .large-4.columns
    h3 dzisiejsze dodane składki
    table.stack
      - Db::Membership::Fee.order(created_at: :desc).includes(:payment).where(created_at: Date.today.beginning_of_day..Date.today.end_of_day, payments: { cash: true, state: 'prepaid'}).each do |payment|
        tr
          td width='20%'
            = payment.year
          td
            - if Db::User.exists?(id: payment.creator_id)
              = Db::User.find(payment.creator_id).display_name
          td
            = "#{payment.user.try(:first_name)} #{payment.user.try(:last_name)}"

  .large-4.columns
    h3 wykazy do akceptacji
    table.stack
      - Db::Profile.where(accepted: false).order('created_at DESC NULLS LAST').select{|p| p.acomplished_courses.include?('list') }.each do |profile|
        tr
          td = link_to profile.display_name, admin_profile_path(profile.id)
